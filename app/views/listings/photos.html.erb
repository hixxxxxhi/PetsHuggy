<%= render 'partial/navbar' %>
<div class="container">
  <div class="col-md-3">
    <!-- vertical-navbar -->
    <%= render 'partial/verticalnavbar' %>
  </div>
  <div class="col-md-9">
    <div class="panel panel-default">
      <div class="panel-heading">
        <div class="text-center">
          <span style="font-size:24px;">リスティング写真の編集</span>
        </div>
      </div>

      <div class="panel-body">
        <%= form_for @photo, html:{multipart: true, class: "dropzone", id: "my-dropzone"} do |f| %>

          <%= f.hidden_field :listing_id, value: @listing.id %>
          <div class="dz-message needsclick">
            <h3>ファイルをここにドロップ</h3>
            <strong>ここをクリックしてアップロード</strong>
          </div>

          <div class="fallback">
            <%= f.file_field :image %>
            <%= f.submit "Upload image" %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<!-- dropzone.js -->
<script type="text/javascript">
  $(function() {
    Dropzone.autoDiscover = false;
    // photos_controller.rbのcreateアクションが呼ばれる
    $("#my-dropzone").dropzone({
      maxFilesize: 200, // MB
      addRemoveLinks: true, // 削除リンク、キャンセルリンクをすべてのpreviewファイルに付ける
      paramName: 'photo[image]', // パラメータの名前
      success: function(file, response) {
        // file.previewElementでpreview要素のhtmlにアクセスできる
        // Add .dz-success class to file.previewElement
        $(file.previewElement).addClass('dz-success');
        // Add response.uploadId to .dz-remove class
        $(file.previewElement).find('.dz-remove').attr('id', response.photoId);
      },
      removedfile: function(file) {
        // 削除選択されたfileのidを取得
        var id = $(file.previewTemplate).find('.dz-remove').attr('id');
        // Call photos_controller.rb destroy action
        $.ajax({
          type: 'DELETE',
          url: "/photos/" + id,
          success: function(data) {
            console.log(data.message);
          }
        });

        var previewElement;
        // parentNode => 親ノード（1つ上のhtml要素）を取得
        // (void 0) => 何も処理しない
        // リスト（親ノード）からプレビュー要素を削除する
        return (previewElement = file.previewElement) != null ? (previewElement.parentNode.removeChild(file.previewElement)) : (void 0);

      },
      // Init executed at first when page loaded
      init: function() {
        // this equals dropzone
        var me = this;

        // meに"complete"イベントを定義
        me.on("complete", function(file) {
          $(file.previewTemplate).find('.dz-remove').text("削除する");
        });
        // Call list function in photos_controller.rb with get method
        $.ajax({
          type: "GET",
          url: "/photos/list",
          data: {'listing_id': <%= @listing.id %>},
          dataType: 'json',
          success: function(data) {
            $.each(data.images, function(key, value) {
              if (data.images != undefined && data.images.length > 0) {
                me.emit("addedfile", value);  // addedfileイベントをvalueのデータで実行する
                me.emit("thumbnail", value, value.src);  // thumbnailイベントをvalueのデータで実行する
                me.emit("complete", value);  // completeイベントをvalueのデータで実行する
                $(value._removeLink).attr("id", value.id);  // valueの_removeLinkのidにvalue.idを追加
              }
            });
          }
        });
      }
    });
  });
</script>
